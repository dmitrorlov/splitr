name: Release Splitr

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.6"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Task and setup PATH
        run: |
          go install github.com/go-task/task/v3/cmd/task@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Extract author info
        id: extract
        run: |
          # Extract author info from wails.json
          AUTHOR_NAME=$(jq -r '.author.name' wails.json)
          AUTHOR_EMAIL=$(jq -r '.author.email' wails.json)
          echo "author_name=$AUTHOR_NAME" >> $GITHUB_OUTPUT
          echo "author_email=$AUTHOR_EMAIL" >> $GITHUB_OUTPUT
          echo "Building with Version: ${{ github.ref_name }}, Author: $AUTHOR_NAME, Email: $AUTHOR_EMAIL"

      - name: Build release with Taskfile
        env:
          VERSION: ${{ github.ref_name }}
          AUTHOR_NAME: ${{ steps.extract.outputs.author_name }}
          AUTHOR_EMAIL: ${{ steps.extract.outputs.author_email }}
          PATH: "/usr/bin:/bin:/usr/sbin:/sbin:$(go env GOPATH)/bin:${{ env.PATH }}"
        run: |
          task ci:release

          # Set the output filename for artifact upload
          OUTPUT_FILENAME="Splitr-${{ github.ref_name }}-macos-arm64.zip"
          echo "OUTPUT_FILENAME=$OUTPUT_FILENAME" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_FILENAME }}
          path: build/bin/${{ env.OUTPUT_FILENAME }}

  create_release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts/ -type f -exec ls -la {} \;

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            ### Changes
            See the commit history for details about what's new in this release.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-cask:
    needs: create_release
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Install Task
        run: |
          go install github.com/go-task/task/v3/cmd/task@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Get release SHA256 and download URL
        id: sha
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Wait a moment for release to be fully available
          sleep 10
          
          # Find the ARM64 ZIP file from release assets with retries
          for i in {1..5}; do
            echo "Attempt $i: Fetching release info..."
            RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            
            # Check if response is valid JSON and not empty
            if echo "$RESPONSE" | jq empty 2>/dev/null; then
              ASSET_COUNT=$(echo "$RESPONSE" | jq -r '.assets // empty | length // 0')
              if [ "$ASSET_COUNT" -gt 0 ]; then
                ASSET_URL=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name | contains("macos-arm64.zip")) | .browser_download_url')
                if [ "$ASSET_URL" != "null" ] && [ ! -z "$ASSET_URL" ]; then
                  echo "Found asset URL: $ASSET_URL"
                  break
                fi
              fi
            fi
            
            echo "No valid response or asset found, waiting 30 seconds..."
            echo "Response was: $RESPONSE"
            sleep 30
          done
          
          if [ "$ASSET_URL" = "null" ] || [ -z "$ASSET_URL" ]; then
            echo "Error: Could not find ARM64 asset after 5 attempts"
            echo "Final response was: $RESPONSE"
            exit 1
          fi

          # Download the file temporarily to calculate SHA256
          curl -L -o temp.zip "$ASSET_URL"
          SHA256=$(shasum -a 256 temp.zip | cut -d' ' -f1)
          rm temp.zip

          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "download_url=$ASSET_URL" >> $GITHUB_OUTPUT

      - name: Checkout homebrew tap
        uses: actions/checkout@v4
        with:
          repository: dmitrorlov/homebrew-splitr
          path: homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Update Cask formula with Taskfile
        env:
          TAG: ${{ github.ref_name }}
          SHA256: ${{ steps.sha.outputs.sha256 }}
          DOWNLOAD_URL: ${{ steps.sha.outputs.download_url }}
        run: |
          cd homebrew-tap
          task -d .. ci:update-cask

      - name: Commit and push changes
        run: |
          cd homebrew-tap
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Casks/splitr.rb
          git commit -m "Update Splitr to ${{ github.ref_name }}"
          git push
