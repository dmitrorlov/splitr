---
version: "3"

# Global task runner options
silent: true

# Load environment variables from .env file
dotenv:
  - ".env"
  - ".env.local"

  # Global environment variables
env:
  # Go build flags and configuration
  GOFLAGS: '{{default "-mod=readonly" .GOFLAGS}}'
  GOARCH: '{{default "amd64" .GOARCH}}'
  GOOS: '{{default "darwin" .GOOS}}'
  CGO_ENABLED: '{{default "1" .CGO_ENABLED}}'
  # CGO flags to suppress macOS linker warnings
  CGO_LDFLAGS: '{{default "-Wl,-w" .CGO_LDFLAGS}}'

  # Wails environment configuration
  WAILS_ENV: '{{default "development" .WAILS_ENV}}'

  # Additional macOS-friendly defaults
  HOMEBREW_PREFIX: '{{default "/opt/homebrew" .HOMEBREW_PREFIX}}'

tasks:
  # Setup meta-task
  setup:
    desc: "Complete project setup (install all tools and dependencies)"
    deps:
      [
        install:mockgen,
        install:golangci-lint,
        install:migrate,
        install:wails,
        install:frontend,
      ]
    cmd: |
      echo "✅ Project setup complete!"
      echo "Run 'task dev' to start development mode"

  # Installation tasks
  install:mockgen:
    desc: "Install mockgen tool (uber-go/mock)"
    cmd: go install go.uber.org/mock/mockgen@latest
    status:
      - test -f "$(go env GOPATH)/bin/mockgen"

  install:golangci-lint:
    desc: "Install golangci-lint"
    cmd: |
      curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
    status:
      - test -f "$(go env GOPATH)/bin/golangci-lint"

  install:migrate:
    desc: "Install golang-migrate tool"
    cmd: go install -tags 'sqlite3' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
    status:
      - test -f "$(go env GOPATH)/bin/migrate"

  install:wails:
    desc: "Install Wails CLI"
    status:
      - command -v wails >/dev/null 2>&1
    cmd: |
      echo "Installing Wails CLI..."
      GOPATH_VAL="$(go env GOPATH)"
      GOBIN_VAL="$(go env GOBIN)"

      # Install wails
      go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1

      # Check multiple possible locations
      GOPATH_BIN="$GOPATH_VAL/bin/wails"
      if [ -n "$GOBIN_VAL" ]; then
        GOBIN_WAILS="$GOBIN_VAL/wails"
      else
        GOBIN_WAILS=""
      fi

      # Check multiple possible locations for wails binary
      GOPATH_PLATFORM_BIN="$GOPATH_VAL/bin/darwin_amd64/wails"
      GOPATH_DARWIN_ARM64_BIN="$GOPATH_VAL/bin/darwin_arm64/wails"

      # Find and setup wails binary
      if [ -f "$GOPATH_BIN" ]; then
        echo "✅ Wails CLI installed successfully"
      elif [ -f "$GOPATH_PLATFORM_BIN" ]; then
        # Create a symlink in the main bin directory for easier access
        ln -sf "$GOPATH_PLATFORM_BIN" "$GOPATH_VAL/bin/wails"
        echo "✅ Wails CLI installed successfully"
      elif [ -f "$GOPATH_DARWIN_ARM64_BIN" ]; then
        # Create a symlink in the main bin directory for easier access
        ln -sf "$GOPATH_DARWIN_ARM64_BIN" "$GOPATH_VAL/bin/wails"
        echo "✅ Wails CLI installed successfully"
      elif [ -n "$GOBIN_WAILS" ] && [ -f "$GOBIN_WAILS" ]; then
        echo "✅ Wails CLI installed successfully"
      elif command -v wails >/dev/null 2>&1; then
        echo "✅ Wails CLI already available in PATH"
      else
        echo "❌ Wails installation failed - binary not found"
        echo "Please check your Go installation and try again."
        exit 1
      fi

  install:frontend:
    desc: "Install frontend dependencies"
    dir: frontend
    cmd: npm install
    sources:
      - package.json
      - package-lock.json
    generates:
      - node_modules/.package-lock.json

  # Mock generation tasks
  mock:storage:
    desc: "Generate mocks for storage interfaces"
    deps: [install:mockgen]
    sources:
      - backend/storage/interface.go
    generates:
      - backend/mocks/storage/mock_storage.go
    cmd: |
      mkdir -p backend/mocks/storage
      mockgen -source=backend/storage/interface.go -destination=backend/mocks/storage/mock_storage.go -package=mock_storage

  mock:usecase:
    desc: "Generate mocks for usecase interfaces"
    deps: [install:mockgen]
    sources:
      - backend/usecase/interface.go
    generates:
      - backend/mocks/usecase/mock_usecase.go
    cmd: |
      mkdir -p backend/mocks/usecase
      mockgen -source=backend/usecase/interface.go -destination=backend/mocks/usecase/mock_usecase.go -package=mock_usecase

  mock:trm:
    desc: "Generate mocks for transaction manager"
    deps: [install:mockgen]
    generates:
      - backend/mocks/trm/mock_trm.go
    cmd: |
      mkdir -p backend/mocks/trm
      mockgen -destination=backend/mocks/trm/mock_trm.go -package=mock_trm github.com/avito-tech/go-transaction-manager/trm/v2 Manager

  mock:all:
    desc: "Generate all mocks"
    deps: [mock:storage, mock:usecase, mock:trm]

  # Linting tasks
  lint:frontend:
    desc: "Run Biome lint on frontend code"
    dir: frontend
    deps: [install:frontend]
    sources:
      - "src/**/*.{js,ts,vue}"
      - "biome.json"
      - "package.json"
    cmd: npm run lint

  lint:backend:
    desc: "Run Go linter (golangci-lint)"
    deps: [install:golangci-lint]
    sources:
      - "**/*.go"
      - ".golangci.yml"
      - go.mod
      - go.sum
    cmd: golangci-lint run --config .golangci.yml

  lint:
    desc: "Run backend and frontend linters"
    deps: [lint:backend, lint:frontend]

  format:frontend:
    desc: "Format frontend code with Biome"
    dir: frontend
    deps: [install:frontend]
    sources:
      - "src/**/*.{js,ts,vue}"
      - "biome.json"
    cmd: npm run format

  # Testing tasks
  test:frontend:
    desc: "Run frontend tests"
    dir: frontend
    deps: [install:frontend]
    sources:
      - "src/**/*.{js,ts,vue}"
      - "tests/**/*.{js,ts}"
      - "package.json"
      - "vitest.config.ts"
    cmd: npm run test:run

  test:frontend:coverage:
    desc: "Run frontend tests with coverage report"
    dir: frontend
    deps: [install:frontend]
    sources:
      - "src/**/*.{js,ts,vue}"
      - "tests/**/*.{js,ts}"
      - "package.json"
      - "vitest.config.ts"
    generates:
      - "coverage/**/*"
    cmd: npm run test:coverage

  test:frontend:coverage:view:
    desc: "Open frontend coverage HTML report in browser"
    deps: [test:frontend:coverage]
    cmd: |
      {{if eq OS "darwin"}}open frontend/coverage/index.html{{else if eq OS "linux"}}xdg-open frontend/coverage/index.html{{else if eq OS "windows"}}start frontend/coverage/index.html{{else}}echo "Please open frontend/coverage/index.html manually"{{end}}

  test:backend:
    desc: "Run backend tests with race detector"
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    cmd: go test -race ./...

  test:
    desc: "Run all tests (backend and frontend)"
    deps: [test:backend, test:frontend]

  test:backend:coverage:
    desc: "Run backend tests with coverage and generate coverage report files"
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - coverage.out
      - coverage.html
      - coverage.tmp
    cmd: |
      # Generate initial coverage profile
      go test -race -coverprofile=coverage.tmp ./...

      # Filter out mock files
      grep -v "/mocks/" coverage.tmp > coverage.out
      rm coverage.tmp

      # Generate HTML report
      go tool cover -html=coverage.out -o coverage.html
      echo "Backend coverage report generated: coverage.html"

  test:backend:coverage:view:
    desc: "Open backend coverage HTML report in browser"
    deps: [test:backend:coverage]
    cmd: |
      {{if eq OS "darwin"}}open coverage.html{{else if eq OS "linux"}}xdg-open coverage.html{{else if eq OS "windows"}}start coverage.html{{else}}echo "Please open coverage.html manually"{{end}}

  test:coverage:
    desc: "Run all tests with coverage (backend and frontend)"
    deps: [test:backend:coverage, test:frontend:coverage]
    cmd: |
      echo "✅ Coverage reports generated:"
      echo "  Backend: coverage.html"
      echo "  Frontend: frontend/coverage/index.html"

  test:coverage:view:
    desc: "Open all coverage reports in browser"
    deps: [test:coverage]
    cmd: |
      {{if eq OS "darwin"}}
      open coverage.html
      open frontend/coverage/index.html
      {{else if eq OS "linux"}}
      xdg-open coverage.html
      xdg-open frontend/coverage/index.html
      {{else if eq OS "windows"}}
      start coverage.html
      start frontend/coverage/index.html
      {{else}}
      echo "Please open coverage.html and frontend/coverage/index.html manually"
      {{end}}

  build:frontend:
    desc: "Build frontend"
    dir: frontend
    deps: [install:frontend, lint:frontend]
    sources:
      - "src/**/*"
      - "*.json"
      - "*.js"
      - "*.ts"
    generates:
      - "dist/**/*"
    cmd: npm run build

  # Development and build tasks
  dev:
    desc: "Run development mode with live reload"
    deps: [install:wails, mock:all]
    cmd: wails dev

  build:
    desc: "Meta build task for CI (runs all checks and builds production version)"
    deps: [lint, mock:all, test:backend, test:frontend, build:frontend]
    cmd: |
      echo "✅ All checks passed, building production version..."
      wails build

  # Database migration tasks
  migrate:create:
    desc: "Create a new migration file (usage: task migrate:create -- migration_name)"
    cmd: |
      {{if .CLI_ARGS}}
      migrate create -ext sql -format unix -dir migrations {{.CLI_ARGS}}
      {{else}}
      echo "Usage: task migrate:create -- migration_name"
      echo "Example: task migrate:create -- add_users_table"
      exit 1
      {{end}}

  # Cleanup tasks
  clean:frontend:
    desc: "Clean frontend build artifacts"
    dir: frontend
    cmd: |
      rm -rf dist
      rm -rf coverage
      rm -rf node_modules/.cache
      echo "Frontend artifacts cleaned"

  clean:backend:
    desc: "Clean backend build artifacts"
    cmd: |
      rm -f Splitr
      rm -f splitr
      rm -rf build/bin
      echo "Backend artifacts cleaned"

  clean:mocks:
    desc: "Clean generated mocks"
    cmd: |
      rm -rf backend/mocks
      echo "Generated mocks cleaned"

  clean:
    desc: "Clean all build artifacts"
    deps: [clean:frontend, clean:backend, clean:mocks]
    cmd: |
      rm -f coverage.out coverage.html
      echo "✅ All artifacts cleaned"

  # Information tasks
  version:
    desc: "Show application version"
    cmd: |
      echo "Splitr Application Version Information:"
      echo "======================================="
      if [ -f "wails.json" ]; then
        echo "App Name: $(cat wails.json | grep '"name"' | cut -d'"' -f4)"
      fi
      if [ -f "go.mod" ]; then
        echo "Go Module: $(head -1 go.mod | cut -d' ' -f2)"
        echo "Go Version: $(grep '^go ' go.mod | cut -d' ' -f2)"
      fi
      echo "Wails Version: $(wails version 2>/dev/null || echo 'Not installed')"

  info:
    desc: "Show project information"
    cmd: |
      echo "📋 Splitr Project Information"
      echo "============================="
      echo "Project: Expense splitting application"
      echo "Framework: Wails v2 (Go + Vue.js)"
      echo "Database: SQLite with migrations"
      echo "Frontend: Vue.js 3 + Vite + TypeScript"
      echo "Backend: Go with Clean Architecture"
      echo ""
      echo "Environment:"
      echo "  GOOS: ${GOOS}"
      echo "  GOARCH: ${GOARCH}"
      echo "  CGO_ENABLED: ${CGO_ENABLED}"
      echo "  DB_URL: ${DB_URL}"
      echo "  WAILS_ENV: ${WAILS_ENV}"

  doctor:
    desc: "Check development environment"
    cmd: |
      echo "🩺 Environment Check"
      echo "===================="

      EXIT_CODE=0

      # Check Go
      if command -v go >/dev/null 2>&1; then
        echo "✅ Go: $(go version)"
      else
        echo "❌ Go: Not installed"
        EXIT_CODE=1
      fi

      # Check Wails
      if command -v wails >/dev/null 2>&1; then
        echo "✅ Wails: $(wails version)"
      else
        echo "❌ Wails: Not installed (run 'task install:wails')"
        EXIT_CODE=1
      fi

      # Check Node.js
      if command -v node >/dev/null 2>&1; then
        echo "✅ Node.js: $(node -v)"
      else
        echo "❌ Node.js: Not installed"
        EXIT_CODE=1
      fi

      # Check npm
      if command -v npm >/dev/null 2>&1; then
        echo "✅ npm: $(npm -v)"
      else
        echo "❌ npm: Not installed"
        EXIT_CODE=1
      fi

      # Check mockgen
      if command -v mockgen >/dev/null 2>&1; then
        echo "✅ mockgen: $(mockgen -version 2>&1 | head -1)"
      else
        echo "⚠️  mockgen: Not installed (run 'task install:mockgen')"
      fi

      # Check golangci-lint
      if command -v golangci-lint >/dev/null 2>&1; then
        echo "✅ golangci-lint: $(golangci-lint version --short)"
      else
        echo "⚠️  golangci-lint: Not installed (run 'task install:golangci-lint')"
      fi

      # Check migrate
      if command -v migrate >/dev/null 2>&1; then
        echo "✅ migrate: $(migrate -version 2>&1 | head -1)"
      else
        echo "⚠️  migrate: Not installed (run 'task install:migrate')"
      fi

      if [ $EXIT_CODE -ne 0 ]; then
        echo ""
        echo "❌ Some required tools are missing. Run 'task setup' to install them."
        exit $EXIT_CODE
      else
        echo ""
        echo "✅ All required tools are installed!"
      fi

  # CI/CD tasks
  ci:setup:
    desc: "Setup CI environment (alias for setup)"
    env:
      WAILS_ENV: '{{default "production" .WAILS_ENV}}'
    deps: [setup]
    cmd: |
      echo "✅ CI environment setup complete!"

  ci:release:
    desc: "Build release version for CI/CD with metadata"
    env:
      WAILS_ENV: "production"
      VERSION: '{{default "dev" .VERSION}}'
      AUTHOR_NAME: '{{default "Unknown" .AUTHOR_NAME}}'
      AUTHOR_EMAIL: '{{default "unknown@example.com" .AUTHOR_EMAIL}}'
    deps: [ci:setup]
    cmd: |
      echo "🚀 Building release version for CI..."
      echo "Version: ${VERSION}"
      echo "Author: ${AUTHOR_NAME} <${AUTHOR_EMAIL}>"

      # Verify wails is available before proceeding
      WAILS_PATH="$(go env GOPATH)/bin/wails"
      if [ -f "$WAILS_PATH" ]; then
        WAILS_CMD="$WAILS_PATH"
      elif command -v wails >/dev/null 2>&1; then
        WAILS_CMD="wails"
      else
        echo "❌ Wails CLI not found. Please run 'task setup' first."
        exit 1
      fi

      # Set the output filename
      OUTPUT_FILENAME="Splitr-${VERSION}-macos-arm64"

      # Build the application for Apple Silicon with metadata
      "$WAILS_CMD" build -clean -platform darwin/arm64 -ldflags="-s -w -X 'main.version=${VERSION}' -X 'main.authorName=${AUTHOR_NAME}' -X 'main.authorEmail=${AUTHOR_EMAIL}'"

      # Create a zip file with the app bundle
      cd build/bin
      zip -r "$OUTPUT_FILENAME.zip" Splitr.app
      echo "📦 Created release package: $OUTPUT_FILENAME.zip"

  ci:update-cask:
    desc: "Generate updated Homebrew Cask formula"
    env:
      TAG: '{{default "v0.1.14" .TAG}}'
      SHA256: '{{default "" .SHA256}}'
      DOWNLOAD_URL: '{{default "" .DOWNLOAD_URL}}'
    cmd: |
      # Remove 'v' prefix from version if present
      VERSION_CLEAN=$(echo "${TAG}" | sed 's/^v//')

      echo "Generating Cask formula for version: $VERSION_CLEAN"
      echo "SHA256: ${SHA256}"
      echo "Download URL: ${DOWNLOAD_URL}"

      # Generate the Cask file content
      cat > Casks/splitr.rb << EOF
      cask "splitr" do
        version "$VERSION_CLEAN"
        sha256 "${SHA256}"

        url "${DOWNLOAD_URL}"
        name "Splitr"
        desc "MacOS application for advanced L2TP VPN split tunneling."
        homepage "https://github.com/dmitrorlov/splitr"

        # Requires macOS 11.0 or later (Big Sur)
        depends_on macos: ">= :big_sur"

        app "Splitr.app"

        # Remove quarantine attributes after installation
        postflight do
          system_command "/usr/bin/xattr",
                         args: ["-dr", "com.apple.quarantine", "#{appdir}/Splitr.app"],
                         sudo: false
        end

        # Cleanup
        uninstall quit: "com.dmitryorlov.splitr"

        zap trash: [
          "~/Library/Application Support/Splitr",
          "~/Library/Caches/com.dmitryorlov.splitr",
          "~/Library/Logs/Splitr",
          "~/Library/Preferences/com.dmitryorlov.splitr.plist",
          "~/Library/Saved Application State/com.dmitryorlov.splitr.savedState",
        ]
      end
      EOF

      echo "✅ Cask formula generated successfully!"

  # Help task
  help:
    desc: "Show categorized list of available tasks"
    cmd: |
      echo "🚀 Splitr Project Tasks"
      echo "=========================="
      echo ""
      echo "📦 Setup & Installation:"
      echo "  setup                 - Complete project setup (install all tools and dependencies)"
      echo "  install:mockgen       - Install mockgen tool (uber-go/mock)"
      echo "  install:golangci-lint - Install golangci-lint"
      echo "  install:migrate       - Install golang-migrate tool"
      echo "  install:wails         - Install Wails CLI"
      echo "  install:frontend      - Install frontend dependencies"
      echo ""
      echo "🔨 Build & Development:"
      echo "  dev                   - Run development mode with live reload"
      echo "  build                 - Meta build task for CI (runs all checks and builds production version)"
      echo "  build:frontend        - Build frontend only"
      echo ""
      echo "🧪 Testing & Quality:"
      echo "  test                  - Run all tests (backend and frontend)"
      echo "  test:backend          - Run backend tests with race detector"
      echo "  test:frontend         - Run frontend tests"
      echo "  test:frontend:watch   - Run frontend tests in watch mode"
      echo "  test:frontend:ui      - Run frontend tests with UI"
      echo "  test:coverage         - Run all tests with coverage (backend and frontend)"
      echo "  test:coverage:view    - Open all coverage reports in browser"
      echo "  test:backend:coverage - Run backend tests with coverage"
      echo "  test:frontend:coverage - Run frontend tests with coverage"
      echo "  lint                  - Run backend and frontend linters"
      echo "  lint:backend          - Run Go linter (golangci-lint)"
      echo "  lint:frontend         - Run Biome lint on frontend code"
      echo "  format:frontend       - Format frontend code with Biome"
      echo ""
      echo "🎭 Mock Generation:"
      echo "  mock:all              - Generate all mocks"
      echo "  mock:storage          - Generate mocks for storage interfaces"
      echo "  mock:usecase          - Generate mocks for usecase interfaces"
      echo "  mock:trm              - Generate mocks for transaction manager"
      echo ""
      echo "🗃️ Database Migrations:"
      echo "  migrate:create        - Create a new migration file"
      echo ""
      echo "🧹 Cleanup:"
      echo "  clean                 - Clean all build artifacts"
      echo "  clean:frontend        - Clean frontend build artifacts"
      echo "  clean:backend         - Clean backend build artifacts"
      echo "  clean:mocks           - Clean generated mocks"
      echo ""
      echo "🚀 CI/CD:"
      echo "  ci:setup              - Setup CI environment (alias for setup)"
      echo "  ci:release            - Build release version for CI/CD with metadata"
      echo "  ci:update-cask        - Generate updated Homebrew Cask formula"
      echo ""
      echo "ℹ️  Information:"
      echo "  version               - Show application version"
      echo "  info                  - Show project information"
      echo "  doctor                - Check development environment"
      echo "  help                  - Show this help message"
      echo ""
      echo "For detailed task information: task --list-all"
      echo "To run a task: task <task-name>"

  # Default task
  default:
    desc: "Show help (default task)"
    cmds:
      - task: help
