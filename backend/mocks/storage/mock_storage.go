// Code generated by MockGen. DO NOT EDIT.
// Source: backend/storage/interface.go
//
// Generated by this command:
//
//	mockgen -source=backend/storage/interface.go -destination=backend/mocks/storage/mock_storage.go -package=mock_storage
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	entity "github.com/dmitrorlov/splitr/backend/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockHost is a mock of Host interface.
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
	isgomock struct{}
}

// MockHostMockRecorder is the mock recorder for MockHost.
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance.
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHost) Add(ctx context.Context, host *entity.Host) (*entity.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, host)
	ret0, _ := ret[0].(*entity.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockHostMockRecorder) Add(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHost)(nil).Add), ctx, host)
}

// Delete mocks base method.
func (m *MockHost) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHostMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHost)(nil).Delete), ctx, id)
}

// List mocks base method.
func (m *MockHost) List(ctx context.Context, filter *entity.ListHostFilter) ([]*entity.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*entity.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockHostMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHost)(nil).List), ctx, filter)
}

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
	isgomock struct{}
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNetwork) Add(ctx context.Context, network *entity.Network) (*entity.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, network)
	ret0, _ := ret[0].(*entity.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockNetworkMockRecorder) Add(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNetwork)(nil).Add), ctx, network)
}

// Delete mocks base method.
func (m *MockNetwork) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNetworkMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetwork)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockNetwork) Get(ctx context.Context, id uint64) (*entity.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNetworkMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetwork)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockNetwork) List(ctx context.Context, filter *entity.ListNetworkFilter) ([]*entity.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*entity.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNetworkMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetwork)(nil).List), ctx, filter)
}

// MockNetworkHost is a mock of NetworkHost interface.
type MockNetworkHost struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkHostMockRecorder
	isgomock struct{}
}

// MockNetworkHostMockRecorder is the mock recorder for MockNetworkHost.
type MockNetworkHostMockRecorder struct {
	mock *MockNetworkHost
}

// NewMockNetworkHost creates a new mock instance.
func NewMockNetworkHost(ctrl *gomock.Controller) *MockNetworkHost {
	mock := &MockNetworkHost{ctrl: ctrl}
	mock.recorder = &MockNetworkHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkHost) EXPECT() *MockNetworkHostMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNetworkHost) Add(ctx context.Context, networkHost *entity.NetworkHost) (*entity.NetworkHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, networkHost)
	ret0, _ := ret[0].(*entity.NetworkHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockNetworkHostMockRecorder) Add(ctx, networkHost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNetworkHost)(nil).Add), ctx, networkHost)
}

// Delete mocks base method.
func (m *MockNetworkHost) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNetworkHostMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkHost)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockNetworkHost) Get(ctx context.Context, id uint64) (*entity.NetworkHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.NetworkHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNetworkHostMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkHost)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockNetworkHost) List(ctx context.Context, filter *entity.ListNetworkHostFilter) ([]*entity.NetworkHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*entity.NetworkHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNetworkHostMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkHost)(nil).List), ctx, filter)
}

// MockNetworkHostSetup is a mock of NetworkHostSetup interface.
type MockNetworkHostSetup struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkHostSetupMockRecorder
	isgomock struct{}
}

// MockNetworkHostSetupMockRecorder is the mock recorder for MockNetworkHostSetup.
type MockNetworkHostSetupMockRecorder struct {
	mock *MockNetworkHostSetup
}

// NewMockNetworkHostSetup creates a new mock instance.
func NewMockNetworkHostSetup(ctrl *gomock.Controller) *MockNetworkHostSetup {
	mock := &MockNetworkHostSetup{ctrl: ctrl}
	mock.recorder = &MockNetworkHostSetupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkHostSetup) EXPECT() *MockNetworkHostSetupMockRecorder {
	return m.recorder
}

// AddBatch mocks base method.
func (m *MockNetworkHostSetup) AddBatch(ctx context.Context, batch []*entity.NetworkHostSetup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockNetworkHostSetupMockRecorder) AddBatch(ctx, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockNetworkHostSetup)(nil).AddBatch), ctx, batch)
}

// DeleteBatchByNetworkHostIDs mocks base method.
func (m *MockNetworkHostSetup) DeleteBatchByNetworkHostIDs(ctx context.Context, networkHostIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatchByNetworkHostIDs", ctx, networkHostIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatchByNetworkHostIDs indicates an expected call of DeleteBatchByNetworkHostIDs.
func (mr *MockNetworkHostSetupMockRecorder) DeleteBatchByNetworkHostIDs(ctx, networkHostIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatchByNetworkHostIDs", reflect.TypeOf((*MockNetworkHostSetup)(nil).DeleteBatchByNetworkHostIDs), ctx, networkHostIDs)
}
