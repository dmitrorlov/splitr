// Code generated by MockGen. DO NOT EDIT.
// Source: backend/usecase/interface.go
//
// Generated by this command:
//
//	mockgen -source=backend/usecase/interface.go -destination=backend/mocks/usecase/mock_usecase.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/dmitrorlov/splitr/backend/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandExecutor is a mock of CommandExecutor interface.
type MockCommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorMockRecorder
	isgomock struct{}
}

// MockCommandExecutorMockRecorder is the mock recorder for MockCommandExecutor.
type MockCommandExecutorMockRecorder struct {
	mock *MockCommandExecutor
}

// NewMockCommandExecutor creates a new mock instance.
func NewMockCommandExecutor(ctrl *gomock.Controller) *MockCommandExecutor {
	mock := &MockCommandExecutor{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutor) EXPECT() *MockCommandExecutorMockRecorder {
	return m.recorder
}

// GetCurrentVPN mocks base method.
func (m *MockCommandExecutor) GetCurrentVPN(ctx context.Context) (entity.VPNService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVPN", ctx)
	ret0, _ := ret[0].(entity.VPNService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentVPN indicates an expected call of GetCurrentVPN.
func (mr *MockCommandExecutorMockRecorder) GetCurrentVPN(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVPN", reflect.TypeOf((*MockCommandExecutor)(nil).GetCurrentVPN), ctx)
}

// GetDefaultNetworkInterface mocks base method.
func (m *MockCommandExecutor) GetDefaultNetworkInterface(ctx context.Context) (entity.NetworkInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultNetworkInterface", ctx)
	ret0, _ := ret[0].(entity.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultNetworkInterface indicates an expected call of GetDefaultNetworkInterface.
func (mr *MockCommandExecutorMockRecorder) GetDefaultNetworkInterface(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultNetworkInterface", reflect.TypeOf((*MockCommandExecutor)(nil).GetDefaultNetworkInterface), ctx)
}

// GetNetworkInfoByNetworkService mocks base method.
func (m *MockCommandExecutor) GetNetworkInfoByNetworkService(ctx context.Context, networkService entity.NetworkService) (*entity.NetworkInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkInfoByNetworkService", ctx, networkService)
	ret0, _ := ret[0].(*entity.NetworkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkInfoByNetworkService indicates an expected call of GetNetworkInfoByNetworkService.
func (mr *MockCommandExecutorMockRecorder) GetNetworkInfoByNetworkService(ctx, networkService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkInfoByNetworkService", reflect.TypeOf((*MockCommandExecutor)(nil).GetNetworkInfoByNetworkService), ctx, networkService)
}

// GetNetworkServiceByNetworkInterface mocks base method.
func (m *MockCommandExecutor) GetNetworkServiceByNetworkInterface(ctx context.Context, networkInterface entity.NetworkInterface) (entity.NetworkService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkServiceByNetworkInterface", ctx, networkInterface)
	ret0, _ := ret[0].(entity.NetworkService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkServiceByNetworkInterface indicates an expected call of GetNetworkServiceByNetworkInterface.
func (mr *MockCommandExecutorMockRecorder) GetNetworkServiceByNetworkInterface(ctx, networkInterface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkServiceByNetworkInterface", reflect.TypeOf((*MockCommandExecutor)(nil).GetNetworkServiceByNetworkInterface), ctx, networkInterface)
}

// ListVPN mocks base method.
func (m *MockCommandExecutor) ListVPN(ctx context.Context) ([]entity.VPNService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPN", ctx)
	ret0, _ := ret[0].([]entity.VPNService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPN indicates an expected call of ListVPN.
func (mr *MockCommandExecutorMockRecorder) ListVPN(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPN", reflect.TypeOf((*MockCommandExecutor)(nil).ListVPN), ctx)
}

// OpenInFinder mocks base method.
func (m *MockCommandExecutor) OpenInFinder(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenInFinder", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenInFinder indicates an expected call of OpenInFinder.
func (mr *MockCommandExecutorMockRecorder) OpenInFinder(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInFinder", reflect.TypeOf((*MockCommandExecutor)(nil).OpenInFinder), ctx, path)
}

// SetNetworkAdditionalRoutes mocks base method.
func (m *MockCommandExecutor) SetNetworkAdditionalRoutes(ctx context.Context, network *entity.Network, networkHostSetupList []*entity.NetworkHostSetup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNetworkAdditionalRoutes", ctx, network, networkHostSetupList)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNetworkAdditionalRoutes indicates an expected call of SetNetworkAdditionalRoutes.
func (mr *MockCommandExecutorMockRecorder) SetNetworkAdditionalRoutes(ctx, network, networkHostSetupList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNetworkAdditionalRoutes", reflect.TypeOf((*MockCommandExecutor)(nil).SetNetworkAdditionalRoutes), ctx, network, networkHostSetupList)
}

// MockCommandRunner is a mock of CommandRunner interface.
type MockCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRunnerMockRecorder
	isgomock struct{}
}

// MockCommandRunnerMockRecorder is the mock recorder for MockCommandRunner.
type MockCommandRunnerMockRecorder struct {
	mock *MockCommandRunner
}

// NewMockCommandRunner creates a new mock instance.
func NewMockCommandRunner(ctrl *gomock.Controller) *MockCommandRunner {
	mock := &MockCommandRunner{ctrl: ctrl}
	mock.recorder = &MockCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandRunner) EXPECT() *MockCommandRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCommandRunner) Run(ctx context.Context, name string, args ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockCommandRunnerMockRecorder) Run(ctx, name any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandRunner)(nil).Run), varargs...)
}

// MockHost is a mock of Host interface.
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
	isgomock struct{}
}

// MockHostMockRecorder is the mock recorder for MockHost.
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance.
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHost) Add(ctx context.Context, host *entity.Host) (*entity.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, host)
	ret0, _ := ret[0].(*entity.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockHostMockRecorder) Add(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHost)(nil).Add), ctx, host)
}

// Delete mocks base method.
func (m *MockHost) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHostMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHost)(nil).Delete), ctx, id)
}

// List mocks base method.
func (m *MockHost) List(ctx context.Context, filter *entity.ListHostFilter) ([]*entity.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*entity.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockHostMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHost)(nil).List), ctx, filter)
}

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
	isgomock struct{}
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNetwork) Add(ctx context.Context, network *entity.Network) (*entity.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, network)
	ret0, _ := ret[0].(*entity.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockNetworkMockRecorder) Add(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNetwork)(nil).Add), ctx, network)
}

// Delete mocks base method.
func (m *MockNetwork) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNetworkMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetwork)(nil).Delete), ctx, id)
}

// List mocks base method.
func (m *MockNetwork) List(ctx context.Context, filter *entity.ListNetworkFilter) ([]*entity.NetworkWithStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*entity.NetworkWithStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNetworkMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetwork)(nil).List), ctx, filter)
}

// ListVPNServices mocks base method.
func (m *MockNetwork) ListVPNServices(ctx context.Context) ([]entity.VPNService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPNServices", ctx)
	ret0, _ := ret[0].([]entity.VPNService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPNServices indicates an expected call of ListVPNServices.
func (mr *MockNetworkMockRecorder) ListVPNServices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPNServices", reflect.TypeOf((*MockNetwork)(nil).ListVPNServices), ctx)
}

// MockNetworkHost is a mock of NetworkHost interface.
type MockNetworkHost struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkHostMockRecorder
	isgomock struct{}
}

// MockNetworkHostMockRecorder is the mock recorder for MockNetworkHost.
type MockNetworkHostMockRecorder struct {
	mock *MockNetworkHost
}

// NewMockNetworkHost creates a new mock instance.
func NewMockNetworkHost(ctrl *gomock.Controller) *MockNetworkHost {
	mock := &MockNetworkHost{ctrl: ctrl}
	mock.recorder = &MockNetworkHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkHost) EXPECT() *MockNetworkHostMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNetworkHost) Add(ctx context.Context, networkHost *entity.NetworkHost) (*entity.NetworkHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, networkHost)
	ret0, _ := ret[0].(*entity.NetworkHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockNetworkHostMockRecorder) Add(ctx, networkHost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNetworkHost)(nil).Add), ctx, networkHost)
}

// Delete mocks base method.
func (m *MockNetworkHost) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNetworkHostMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkHost)(nil).Delete), ctx, id)
}

// ExportByNetworkIDForContext mocks base method.
func (m *MockNetworkHost) ExportByNetworkIDForContext(ctx context.Context, networkID uint64) (*entity.NetworkHostContextExportPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportByNetworkIDForContext", ctx, networkID)
	ret0, _ := ret[0].(*entity.NetworkHostContextExportPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportByNetworkIDForContext indicates an expected call of ExportByNetworkIDForContext.
func (mr *MockNetworkHostMockRecorder) ExportByNetworkIDForContext(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportByNetworkIDForContext", reflect.TypeOf((*MockNetworkHost)(nil).ExportByNetworkIDForContext), ctx, networkID)
}

// ImportByNetworkIDFromJSON mocks base method.
func (m *MockNetworkHost) ImportByNetworkIDFromJSON(ctx context.Context, networkID uint64, jsonData string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportByNetworkIDFromJSON", ctx, networkID, jsonData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportByNetworkIDFromJSON indicates an expected call of ImportByNetworkIDFromJSON.
func (mr *MockNetworkHostMockRecorder) ImportByNetworkIDFromJSON(ctx, networkID, jsonData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportByNetworkIDFromJSON", reflect.TypeOf((*MockNetworkHost)(nil).ImportByNetworkIDFromJSON), ctx, networkID, jsonData)
}

// List mocks base method.
func (m *MockNetworkHost) List(ctx context.Context, filter *entity.ListNetworkHostFilter) ([]*entity.NetworkHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*entity.NetworkHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNetworkHostMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkHost)(nil).List), ctx, filter)
}

// MockNetworkHostSetup is a mock of NetworkHostSetup interface.
type MockNetworkHostSetup struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkHostSetupMockRecorder
	isgomock struct{}
}

// MockNetworkHostSetupMockRecorder is the mock recorder for MockNetworkHostSetup.
type MockNetworkHostSetupMockRecorder struct {
	mock *MockNetworkHostSetup
}

// NewMockNetworkHostSetup creates a new mock instance.
func NewMockNetworkHostSetup(ctrl *gomock.Controller) *MockNetworkHostSetup {
	mock := &MockNetworkHostSetup{ctrl: ctrl}
	mock.recorder = &MockNetworkHostSetupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkHostSetup) EXPECT() *MockNetworkHostSetupMockRecorder {
	return m.recorder
}

// ResetByNetworkID mocks base method.
func (m *MockNetworkHostSetup) ResetByNetworkID(ctx context.Context, networkID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetByNetworkID", ctx, networkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetByNetworkID indicates an expected call of ResetByNetworkID.
func (mr *MockNetworkHostSetupMockRecorder) ResetByNetworkID(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetByNetworkID", reflect.TypeOf((*MockNetworkHostSetup)(nil).ResetByNetworkID), ctx, networkID)
}

// SyncByNetworkID mocks base method.
func (m *MockNetworkHostSetup) SyncByNetworkID(ctx context.Context, network uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncByNetworkID", ctx, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncByNetworkID indicates an expected call of SyncByNetworkID.
func (mr *MockNetworkHostSetupMockRecorder) SyncByNetworkID(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncByNetworkID", reflect.TypeOf((*MockNetworkHostSetup)(nil).SyncByNetworkID), ctx, network)
}

// MockUpdate is a mock of Update interface.
type MockUpdate struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateMockRecorder
	isgomock struct{}
}

// MockUpdateMockRecorder is the mock recorder for MockUpdate.
type MockUpdateMockRecorder struct {
	mock *MockUpdate
}

// NewMockUpdate creates a new mock instance.
func NewMockUpdate(ctrl *gomock.Controller) *MockUpdate {
	mock := &MockUpdate{ctrl: ctrl}
	mock.recorder = &MockUpdateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdate) EXPECT() *MockUpdateMockRecorder {
	return m.recorder
}

// CheckForUpdates mocks base method.
func (m *MockUpdate) CheckForUpdates() (*entity.UpdateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForUpdates")
	ret0, _ := ret[0].(*entity.UpdateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForUpdates indicates an expected call of CheckForUpdates.
func (mr *MockUpdateMockRecorder) CheckForUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForUpdates", reflect.TypeOf((*MockUpdate)(nil).CheckForUpdates))
}
